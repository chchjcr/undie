{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["a","calendarId","today","Date","now","axios","baseURL","url","params","singleEvents","timeZone","maxAttendees","maxResults","sanitizeHtml","timeMin","toDateString","toISOString","timeMax","setUTCDate","getUTCDate","key","res","data","items","map","event","name","summary","day","start","date","dateTime","description","console","error","Boolean","window","location","hostname","match","ReactDOM","render","useState","getUTCDay","isOpen","setIsOpen","events","setEvents","useEffect","getCalendar","then","status","trim","toUpperCase","className","src","process","alt","join","dangerouslySetInnerHTML","__html","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iXAYA,kCAAAA,EAAA,sEAEMC,EAAa,uDACbC,EAAQ,IAAIC,KAAKA,KAAKC,OAH5B,SAIkBC,IAAM,CACrBC,QAAS,qDACTC,IAAKN,EAAa,UAClBO,OAAQ,CACPP,aACAQ,cAAc,EACdC,SAAU,gBACVC,aAAc,EACdC,WAAY,IACZC,cAAc,EACdC,QAAS,IAAIX,KAAKD,EAAMa,gBAAgBC,cACxCC,QAAS,IAAId,KAAK,IAAIA,KAAKD,EAAMgB,WAAWhB,EAAMiB,aAAe,IAAIJ,gBAAgBC,cACrFI,IAAK,6CAhBT,cAIMC,EAJN,OAmBMC,EAAOD,EAAIC,KAnBjB,mBAoBUA,EAAKC,OAAS,IAAIC,KAAI,SAACC,GAC9B,MAAO,CACNC,KAAMD,EAAME,QACZC,IAAKH,EAAMI,MAAQ,IAAI1B,KAAKsB,EAAMI,MAAMC,MAAQL,EAAMI,MAAME,UAAY,IAAI5B,KAAKA,KAAKC,OACtF4B,YAAaP,EAAMO,aAAe,QAE9B,IA1BR,yCA4BEC,QAAQC,MAAR,MA5BF,kBA6BS,IA7BT,2D,sBCAoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFuCD,WAAgB,IAAD,EAEDC,qBA1CjB,IAAIvC,KAAKA,KAAKC,OACVuC,aAEJ,IAqCkB,mBAEtBC,EAFsB,KAEdC,EAFc,OAGDH,mBAAS,IAHR,mBAGtBI,EAHsB,KAGdC,EAHc,KAkB7B,OAbAC,qBAAU,Y,2CACTC,GACEC,MAAK,SAAC5B,GAAU,IAAD,uBACf,YAAkBA,EAAlB,+CAAwB,CAAC,IACpB6B,EADmB,QACJzB,KAAK0B,OAAOC,cAChB,WAAXF,EAAqBN,GAAU,GACf,SAAXM,GAAmBN,GAAU,IAJxB,kFAMfE,EAAUzB,QAEV,IAIF,yBAAKgC,UAAU,OACd,2DAGA,yBAAKA,UAAU,gBACd,yBACCC,IAAKC,iCACLF,UAAU,WACVG,IAAI,UAGN,yBACCH,UAAW,CAAC,SAAUV,EAAS,OAAS,UAAUc,KAAK,MAEtDd,EAAS,MAAQ,MAElBE,EAAOtB,KAAI,SAACC,GACZ,OAAO,yBAAK6B,UAAU,SACnB7B,EAAMO,YAEC,yBAAKsB,UAAU,mBAAmBK,wBAAyB,CACnEC,OAAQnC,EAAMO,eAHO,yBAAKsB,UAAU,aACnC7B,EAAMC,UAMV,wHEnFa,MAASmC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLD,QAAQC,MAAMA,EAAMmC,c","file":"static/js/main.6dd9e03c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction calcDay() {\n\tlet date = new Date(Date.now());\n\tlet day = date.getUTCDay();\n\t// JavaScript weeks begin on a Sunday with 0\n\tif (day <= 2) return false;\n\treturn true;\n}\n\nasync function getCalendar() {\n\ttry {\n\t\tlet calendarId = '1di06f3pqhr8o0mrefiiouts80@group.calendar.google.com';\n\t\tlet today = new Date(Date.now());\n\t\tlet res = await axios({\n\t\t\tbaseURL: 'https://clients6.google.com/calendar/v3/calendars/',\n\t\t\turl: calendarId + '/events',\n\t\t\tparams: {\n\t\t\t\tcalendarId,\n\t\t\t\tsingleEvents: true,\n\t\t\t\ttimeZone: 'Europe/London',\n\t\t\t\tmaxAttendees: 1,\n\t\t\t\tmaxResults: 250,\n\t\t\t\tsanitizeHtml: true,\n\t\t\t\ttimeMin: new Date(today.toDateString()).toISOString(), //'2019-10-27T00:00:00Z',\n\t\t\t\ttimeMax: new Date(new Date(today.setUTCDate(today.getUTCDate() + 1)).toDateString()).toISOString(), //'2019-12-01T00:00:00Z',\n\t\t\t\tkey: 'AIzaSyAWgkdBGseBg_AtOB2kfZXWiyp4RM6b45c' //AIzaSyBNlYH01_9Hc5S1J9vuFmu2nUqBZJNAXxs'\n\t\t\t}\n\t\t});\n\t\tlet data = res.data;\n\t\treturn (data.items || []).map((event) => {\n\t\t\treturn {\n\t\t\t\tname: event.summary,\n\t\t\t\tday: event.start ? new Date(event.start.date || event.start.dateTime) : new Date(Date.now()),\n\t\t\t\tdescription: event.description || ''\n\t\t\t}\n\t\t}) || [];\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\treturn [];\n\t}\n}\n\nexport default function App() {\n\n\tconst [isOpen, setIsOpen] = useState(calcDay());\n\tconst [events, setEvents] = useState([]);\n\n\tuseEffect(() => {\n\t\tgetCalendar()\n\t\t\t.then((data) => {\n\t\t\t\tfor (let event of data) {\n\t\t\t\t\tlet status = event.name.trim().toUpperCase();\n\t\t\t\t\tif (status === 'CLOSED') setIsOpen(false);\n\t\t\t\t\telse if (status === 'OPEN') setIsOpen(true);\n\t\t\t\t}\n\t\t\t\tsetEvents(data);\n\t\t\t});\n\t}, [])\n\t\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div>\n\t\t\t\tIS THE UNDIE OPEN TONIGHT?\n\t\t\t</div>\n\t\t\t<div className='imgContainer'>\n\t\t\t\t<img\n\t\t\t\t\tsrc={process.env.PUBLIC_URL + '/crest-cardinals-hat.png'}\n\t\t\t\t\tclassName=\"App-logo\"\n\t\t\t\t\talt=\"logo\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={['isOpen', isOpen ? 'open' : 'closed'].join(' ')}\n\t\t\t>\n\t\t\t\t{isOpen ? 'YES' : 'NO'}\n\t\t\t</div>\n\t\t\t{events.map((event) => {\n\t\t\t\treturn <div className='event'>\n\t\t\t\t\t{!event.description ? <div className='eventName'>\n\t\t\t\t\t\t{event.name}\n\t\t\t\t\t</div> : <div className='eventDescription' dangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html: event.description\n\t\t\t\t\t}} />}\n\t\t\t\t</div>\n\t\t\t})}\n\t\t\t<div>\n\t\t\t\tThe undie is open every Wednesday, Thursday, Friday, and Saturday, from 8PM to 11PM.\n\t\t\t</div>\n\t\t</div>\n\t);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}